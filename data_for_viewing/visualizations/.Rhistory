cat("The 'Date' column is missing or is not of character type.\n")
}
return(dataframe)
}
fix_dates_data(rstb_data)
View(rstb_data)
View(rstb_data)
#date fix
library(lubridate)
fix_dates_data <- function(dataframe) {
if ("Date" %in% names(dataframe) &&
is.character(dataframe[["Date"]])) {
fix_date_format <- function(date_str) {
parsed_date <- parse_date_time(date_str, orders = c("ymd", "ym"))
if (is.na(parsed_date) &&
grepl("^\\d{4}-\\d{1,2}$", date_str)) {
parsed_date <- parse_date_time(paste0(date_str, "-01"), orders = "ymd")
}
if (!is.na(parsed_date)) {
return(format(parsed_date, "%Y-%m-%d"))
} else {
return(NA_character_)
}
}
dataframe[["Date"]] <- sapply(dataframe[["Date"]], fix_date_format)
failed_parses <- is.na(dataframe[["Date"]])
if (any(failed_parses)) {
cat("Values in the 'Date' column that failed to parse:\n")
print(dataframe[["Date"]][failed_parses])
} else {
cat("All values in the 'Date' column are now correctly formatted as YYYY-MM-DD.\n")
}
} else {
cat("The 'Date' column is missing or is not of character type.\n")
}
return(dataframe)
}
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(ggplot2, dplyr, tidyr, readr, readxl, lubridate, gridExtra)
#date fix
library(lubridate)
fix_dates_data <- function(dataframe) {
if ("Date" %in% names(dataframe) &&
is.character(dataframe[["Date"]])) {
fix_date_format <- function(date_str) {
parsed_date <- parse_date_time(date_str, orders = c("ymd", "ym"))
if (is.na(parsed_date) &&
grepl("^\\d{4}-\\d{1,2}$", date_str)) {
parsed_date <- parse_date_time(paste0(date_str, "-01"), orders = "ymd")
}
if (!is.na(parsed_date)) {
return(format(parsed_date, "%Y-%m-%d"))
} else {
return(NA_character_)
}
}
dataframe[["Date"]] <- sapply(dataframe[["Date"]], fix_date_format)
failed_parses <- is.na(dataframe[["Date"]])
if (any(failed_parses)) {
cat("Values in the 'Date' column that failed to parse:\n")
print(dataframe[["Date"]][failed_parses])
} else {
cat("All values in the 'Date' column are now correctly formatted as YYYY-MM-DD.\n")
}
} else {
cat("The 'Date' column is missing or is not of character type.\n")
}
return(dataframe)
}
load_and_preprocess_data <- function(file_path) {
data <- read_excel(file_path, sheet = 1)
data$Keyword <- as.factor(data$Keyword)
data$Filename <- as.factor(data$Filename)
data <- data %>%
mutate(Category = case_when(
grepl("fac", Keyword, ignore.case = TRUE) ~ "fact",
grepl("fic", Keyword, ignore.case = TRUE) ~ "fiction",
TRUE ~ "other"
))
return(data)
}
rstl_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate.xlsx")
s_data <- load_and_preprocess_data("../ff_spectator_words_found_context_separate.xlsx")
rstb_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate_RSTB.xlsx")
s_data %>% #spectator
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstl_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstb_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
plot_word_distribution_by_year <- function(data, title, group_var = "Category") {
# Get the min and max years
min_year <- min(year(data$Date), na.rm = TRUE)
max_year <- max(year(data$Date), na.rm = TRUE)
data %>%
mutate(Year = year(Date)) %>%
group_by(Year, !!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
ggplot(aes(x = Year, y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = title,
x = "Year",
y = "Count of words",
fill = group_var) +
scale_x_continuous(breaks = function(x) {
# Get default breaks
default_breaks <- scales::pretty_breaks()(x)
# Add min and max years if they're not already included
unique(sort(c(min_year, default_breaks, max_year)))
})
}
create_pie_chart <- function(data, title, group_var = "Category") {
summary_data <- data %>%
group_by(!!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total_count = sum(count),
percentage = round((count / total_count) * 100, 2))
ggplot(summary_data, aes(x = "", y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(!!sym(group_var), ": ", count, " (", percentage, "%)")),
position = position_stack(vjust = 0.5)) +
labs(title = title,
fill = group_var)
}
rstl_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rs_plot1 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Keyword")
rs_plot2 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Category")
rs_plot3 <- create_pie_chart(rstl_data, "RSTL: Distribution of Categories", "Category")
rs_grid <- grid.arrange(rs_plot1, rs_plot2, rs_plot3, ncol = 2, top = "Royal society RSTL")
rstb_data <- fix_dates_data(rstb_data)
View(rstb_data)
rstb_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
#odd formatting of years
rs_plot1 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Keyword")
rs_plot2 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Category")
rs_plot3 <- create_pie_chart(rstb_data, "RSTB: Distribution of Categories", "Category")
rs_grid <- grid.arrange(rs_plot1, rs_plot2, rs_plot3, ncol = 2, top = "RSTB")
View(rstb_data)
View(rstb_data)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(ggplot2, dplyr, tidyr, readr, readxl, lubridate, gridExtra)
#date fix
library(lubridate)
fix_dates_data <- function(dataframe) {
if ("Date" %in% names(dataframe) &&
is.character(dataframe[["Date"]])) {
fix_date_format <- function(date_str) {
parsed_date <- parse_date_time(date_str, orders = c("ymd", "ym"))
if (is.na(parsed_date) &&
grepl("^\\d{4}-\\d{1,2}$", date_str)) {
parsed_date <- parse_date_time(paste0(date_str, "-01"), orders = "ymd")
}
if (!is.na(parsed_date)) {
return(format(parsed_date, "%Y-%m-%d"))
} else {
return(NA_character_)
}
}
dataframe[["Date"]] <- sapply(dataframe[["Date"]], fix_date_format)
failed_parses <- is.na(dataframe[["Date"]])
if (any(failed_parses)) {
cat("Values in the 'Date' column that failed to parse:\n")
print(dataframe[["Date"]][failed_parses])
} else {
cat("All values in the 'Date' column are now correctly formatted as YYYY-MM-DD.\n")
}
} else {
cat("The 'Date' column is missing or is not of character type.\n")
}
return(dataframe)
}
load_and_preprocess_data <- function(file_path) {
data <- read_excel(file_path, sheet = 1)
data$Keyword <- as.factor(data$Keyword)
data$Filename <- as.factor(data$Filename)
data <- data %>%
mutate(Category = case_when(
grepl("fac", Keyword, ignore.case = TRUE) ~ "fact",
grepl("fic", Keyword, ignore.case = TRUE) ~ "fiction",
TRUE ~ "other"
))
return(data)
}
rstl_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate.xlsx")
s_data <- load_and_preprocess_data("../ff_spectator_words_found_context_separate.xlsx")
rstb_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate_RSTB.xlsx")
s_data %>% #spectator
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstl_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstb_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
#THIS SHOULD BE NORMALIZED! BY WORD % BUT FOR NOW GONNA JUST USE THE AMOUNT OF ROWS TO NORMALIZE (UNIDEAL)
library(dplyr)
library(ggplot2)
library(lubridate)
plot_word_distribution_by_year <- function(data, title, group_var = "Category") {
# Get the min and max years
min_year <- min(year(data$Date), na.rm = TRUE)
max_year <- max(year(data$Date), na.rm = TRUE)
data %>%
mutate(Year = year(Date)) %>%
group_by(Year, !!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Year) %>%
mutate(proportion = count / sum(count)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = proportion, fill = !!sym(group_var))) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = title,
x = "Year",
y = "Proportion of words",
fill = group_var) +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_continuous(breaks = function(x) {
# Get default breaks
default_breaks <- scales::pretty_breaks()(x)
# Add min and max years if they're not already included
unique(sort(c(min_year, default_breaks, max_year)))
})
}
create_pie_chart <- function(data, title, group_var = "Category") {
summary_data <- data %>%
group_by(!!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(proportion = count / sum(count),
percentage = round(proportion * 100, 2))
ggplot(summary_data, aes(x = "", y = proportion, fill = !!sym(group_var))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(!!sym(group_var), ": ", count, " (", percentage, "%)")),
position = position_stack(vjust = 0.5)) +
labs(title = title,
fill = group_var)
}
rstl_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rs_plot1 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Keyword")
rs_plot2 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Category")
rs_plot3 <- create_pie_chart(rstl_data, "RSTL: Distribution of Categories", "Category")
rs_grid <- grid.arrange(rs_plot1, rs_plot2, rs_plot3, ncol = 2, top = "Royal society RSTL")
rstb_data <- fix_dates_data(rstb_data)
rstb_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
#odd formatting of years
rs_plot1 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Keyword")
rs_plot2 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Category")
rs_plot3 <- create_pie_chart(rstb_data, "RSTB: Distribution of Categories", "Category")
rs_grid <- grid.arrange(rs_plot1, rs_plot2, rs_plot3, ncol = 2, top = "RSTB")
#this omits the unclear dates out of analysis though since they cant parse as Dates :(
#Maybe fix later (preface esp)
s_data <- s_data %>%
mutate(Date = ifelse(Date == "unclear", NA, Date),
Year = year(Date))
s_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
s_plot1 <- plot_word_distribution_by_year(s_data, "Spectator: Distr. by Year", "Keyword")
s_plot2 <- plot_word_distribution_by_year(s_data, "Spectator: Distr. by Year", "Category")
s_plot3 <- create_pie_chart(s_data, "Spectator: Distr. of Categories", "Category")
s_plot4 <- create_pie_chart(s_data, "Spectator: Distr. of Keywords", "Keyword")
s_grid <- grid.arrange(s_plot1, s_plot2, s_plot3, s_plot4, ncol = 2,
top = "Spectator Data")
#write rs_data and s_data into a csv (in case its useful)
write.csv(rs_data, "rs_data.csv")
#THIS SHOULD BE NORMALIZED! BY WORD % BUT FOR NOW GONNA JUST USE THE AMOUNT OF ROWS TO NORMALIZE (UNIDEAL)
plot_word_distribution_by_year <- function(data, title, group_var = "Category") {
min_year <- min(year(data$Date), na.rm = TRUE)
max_year <- max(year(data$Date), na.rm = TRUE)
data %>%
mutate(Year = year(Date)) %>%
group_by(Year, !!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Year) %>%
mutate(total_count = sum(count),
percentage = (count / total_count) * 100) %>%
ungroup() %>%
ggplot(aes(x = Year, y = percentage, fill = !!sym(group_var))) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = title,
x = "Year",
y = "Percentage of words",
fill = group_var) +
scale_x_continuous(breaks = function(x) {
default_breaks <- scales::pretty_breaks()(x)
unique(sort(c(min_year, default_breaks, max_year)))
})
}
create_pie_chart <- function(data, title, group_var = "Category") {
summary_data <- data %>%
group_by(!!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total_count = sum(count),
percentage = round((count / total_count) * 100, 2))
ggplot(summary_data, aes(x = "", y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(!!sym(group_var), ": ", count, " (", percentage, "%)")),
position = position_stack(vjust = 0.5)) +
labs(title = title,
fill = group_var)
}
rstb_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
#odd formatting of years
rs_plot1 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Keyword")
rs_plot2 <- plot_word_distribution_by_year(rstb_data, "RSTB: Distribution by Year", "Category")
rs_plot3 <- create_pie_chart(rstb_data, "RSTB: Distribution of Categories", "Category")
rs_grid <- grid.arrange(rs_plot1, rs_plot2, rs_plot3, ncol = 2, top = "RSTB")
#THIS SHOULD BE NORMALIZED! BY WORD AMOUNT need to add something to the framework
library(dplyr)
library(ggplot2)
library(lubridate)
# Function to load and combine word counts
load_word_counts <- function(file1, file2) {
word_counts1 <- read.csv(file1)
word_counts2 <- read.csv(file2)
combined_word_counts <- bind_rows(word_counts1, word_counts2)
combined_word_counts %>%
mutate(Year = as.integer(Year))
}
# Function to normalize data by word count
normalize_by_word_count <- function(data, word_counts, normalize) {
if (normalize) {
data %>%
left_join(word_counts, by = "Year") %>%
mutate(count = count / TotalWordCount * 100)
} else {
data
}
}
# Function to plot word distribution by year
plot_word_distribution_by_year <- function(data, title, group_var = "Category", normalize = FALSE, word_counts) {
min_year <- min(year(data$Date), na.rm = TRUE)
max_year <- max(year(data$Date), na.rm = TRUE)
summary_data <- data %>%
mutate(Year = year(Date)) %>%
group_by(Year, !!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop')
normalized_data <- normalize_by_word_count(summary_data, word_counts, normalize)
ggplot(normalized_data, aes(x = Year, y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = title,
x = "Year",
y = ifelse(normalize, "Count (normalized by word count)", "Count"),
fill = group_var) +
scale_x_continuous(breaks = function(x) {
default_breaks <- scales::pretty_breaks()(x)
unique(sort(c(min_year, default_breaks, max_year)))
})
}
# Function to create a pie chart
create_pie_chart <- function(data, title, group_var = "Category") {
summary_data <- data %>%
group_by(!!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total_count = sum(count),
percentage = round((count / total_count) * 100, 2))
ggplot(summary_data, aes(x = "", y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(!!sym(group_var), ": ", count, " (", percentage, "%)")),
position = position_stack(vjust = 0.5)) +
labs(title = title,
fill = group_var)
}
# Example usage
word_counts <- load_word_counts("word_counts_rstb.csv", "word_counts_rstl.csv")
data <- read.csv("your_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(ggplot2, dplyr, tidyr, readr, readxl, lubridate, gridExtra)
#date fix
library(lubridate)
fix_dates_data <- function(dataframe) {
if ("Date" %in% names(dataframe) &&
is.character(dataframe[["Date"]])) {
fix_date_format <- function(date_str) {
parsed_date <- parse_date_time(date_str, orders = c("ymd", "ym"))
if (is.na(parsed_date) &&
grepl("^\\d{4}-\\d{1,2}$", date_str)) {
parsed_date <- parse_date_time(paste0(date_str, "-01"), orders = "ymd")
}
if (!is.na(parsed_date)) {
return(format(parsed_date, "%Y-%m-%d"))
} else {
return(NA_character_)
}
}
dataframe[["Date"]] <- sapply(dataframe[["Date"]], fix_date_format)
failed_parses <- is.na(dataframe[["Date"]])
if (any(failed_parses)) {
cat("Values in the 'Date' column that failed to parse:\n")
print(dataframe[["Date"]][failed_parses])
} else {
cat("All values in the 'Date' column are now correctly formatted as YYYY-MM-DD.\n")
}
} else {
cat("The 'Date' column is missing or is not of character type.\n")
}
return(dataframe)
}
load_and_preprocess_data <- function(file_path) {
data <- read_excel(file_path, sheet = 1)
data$Keyword <- as.factor(data$Keyword)
data$Filename <- as.factor(data$Filename)
data <- data %>%
mutate(Category = case_when(
grepl("fac", Keyword, ignore.case = TRUE) ~ "fact",
grepl("fic", Keyword, ignore.case = TRUE) ~ "fiction",
TRUE ~ "other"
))
return(data)
}
rstl_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate.xlsx")
s_data <- load_and_preprocess_data("../ff_spectator_words_found_context_separate.xlsx")
rstb_data <- load_and_preprocess_data("../ff_royal_society_words_found_context_separate_RSTB.xlsx")
s_data %>% #spectator
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstl_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rstb_data %>% #royal society
group_by(Keyword) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total = sum(count), percentage = round((count / total) * 100, 1))
#THIS SHOULD BE NORMALIZED! BY WORD AMOUNT need to add something to the framework
library(dplyr)
library(ggplot2)
library(lubridate)
# Function to load and combine word counts
load_word_counts <- function(file1, file2) {
word_counts1 <- read.csv(file1)
word_counts2 <- read.csv(file2)
combined_word_counts <- bind_rows(word_counts1, word_counts2)
combined_word_counts %>%
mutate(Year = as.integer(Year))
}
# Function to normalize data by word count
normalize_by_word_count <- function(data, word_counts, normalize) {
if (normalize) {
data %>%
left_join(word_counts, by = "Year") %>%
mutate(count = count / TotalWordCount * 100)
} else {
data
}
}
# Function to plot word distribution by year
plot_word_distribution_by_year <- function(data, title, group_var = "Category", normalize = FALSE, word_counts) {
min_year <- min(year(data$Date), na.rm = TRUE)
max_year <- max(year(data$Date), na.rm = TRUE)
summary_data <- data %>%
mutate(Year = year(Date)) %>%
group_by(Year, !!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop')
normalized_data <- normalize_by_word_count(summary_data, word_counts, normalize)
ggplot(normalized_data, aes(x = Year, y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = title,
x = "Year",
y = ifelse(normalize, "Count (normalized by word count)", "Count"),
fill = group_var) +
scale_x_continuous(breaks = function(x) {
default_breaks <- scales::pretty_breaks()(x)
unique(sort(c(min_year, default_breaks, max_year)))
})
}
# Function to create a pie chart
create_pie_chart <- function(data, title, group_var = "Category") {
summary_data <- data %>%
group_by(!!sym(group_var)) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(total_count = sum(count),
percentage = round((count / total_count) * 100, 2))
ggplot(summary_data, aes(x = "", y = count, fill = !!sym(group_var))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(!!sym(group_var), ": ", count, " (", percentage, "%)")),
position = position_stack(vjust = 0.5)) +
labs(title = title,
fill = group_var)
}
word_counts <- load_word_counts("word_counts_rstb.csv", "word_counts_rstl.csv")
rstl_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rs_plot1 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Keyword", normalize = TRUE, word_counts = word_counts)
View(word_counts)
rstl_data %>% group_by(Keyword) %>% summarise(count = n(), .groups = 'drop') %>% mutate(total = sum(count), percentage = round((count / total) * 100, 1))
rs_plot1 <- plot_word_distribution_by_year(rstl_data, "RSTL: Distribution by Year", "Keyword", normalize = TRUE, word_counts = word_counts)
