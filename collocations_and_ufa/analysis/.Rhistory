geom_point() +
scale_x_continuous(
breaks = sort(unique(c(seq(floor(min(g$year)), ceiling(max(g$year)), by = 20)))),
limits = c(floor(min(g$year)), ceiling(max(g$year)))
) +
xlab("Year") +
ylab("AC1") +
ggtitle(paste("UFA with", highlight_word, "as Collocate"))
final_plot <- p +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#707070", level = 0.95) +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#FFFF00", level = 0.995) +
geom_point(
data = g[g$year %in% highlight_years,],
aes(x = year, y = ac1, color = paste0("'", highlight_word, "' as collocate")),
size = 3
) +
scale_color_manual(
values = setNames("#FF6B6B", paste0("'", highlight_word, "' as collocate"))
) +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "white", color = "gray90"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", margin = margin(b = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "gray90")
)
ggsave(output_file, plot = final_plot, width = 12, height = 8, units = "in", dpi = 300)
print(paste("Years with", highlight_word, "as a collocate:", paste(highlight_years, collapse = ", ")))
}
#3 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_fact_600-3_w3/"
)
library(fs)
library(tidyverse)
library(irrCAC)
library(pacman)
# Main function to process a single folder of collocate data
process_collocate_folder <- function(folder_path,
mi_score_threshold = 3,
highlight_word = NULL,
output_dir = ".") {
folder_info <- extract_folder_info(folder_path)
# Create output directory if it doesn't exist
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
target_word <- ifelse(grepl("facts", folder_path), "facts",
ifelse(grepl("fact", folder_path), "fact", "unknown")) #could be part of the helper function, but w/e
window = folder_info$window
# Process the data
all_data <- load_collocate_data(folder_path, mi_score_threshold)
spread_data <- prepare_spread_data(all_data)
# Save the processed data
output_file_base <- paste0(target_word, "_collocates_",
folder_info$start_year, "_",
folder_info$end_year,
folder_info$window, "")
save_spread_data(spread_data, output_file_base, output_dir)
# Calculate Gwet's AC1
g <- calculate_gwet_ac1(spread_data)
# Create plots
create_ufa_plot(g, output_file_base, output_dir, target_word, window)
# Create highlight plot if highlight_word is provided AND exists in the data (currently useless)
if (!is.null(highlight_word)) {
if (highlight_word %in% all_data$word) {
create_collocate_highlight_plot(g, all_data, output_file_base, highlight_word, output_dir)
message(sprintf("Created highlight plot for '%s' as it exists as a collocate", highlight_word))
} else {
message(sprintf("Skipping highlight plot: '%s' was not found as a collocate in the data", highlight_word))
}
}
# Return the processed data and AC1 calculations
return(list(
all_data = all_data,
spread_data = spread_data,
gwet_ac1 = g,
folder_info = folder_info
))
}
# Helper function to extract information from folder name
extract_folder_info <- function(folder_path) {
folder_name <- basename(folder_path)
# Extract years
years <- str_extract_all(folder_name, "\\d{4}")[[1]]
start_year <- years[1]
end_year <- years[2]
#get the window size (for collocate)
window <- ifelse(grepl("window5", folder_name), "5", "3")
# Extract other parameters if present (currently useless)
word_count <- str_extract(folder_name, "\\d+m-\\d+") # For patterns like "2m-20"
return(list(
start_year = start_year,
end_year = end_year,
window = window,
word_count = word_count
))
}
# Function to process individual collocate files
process_file <- function(file_path) {
year <- as.numeric(str_extract(basename(file_path), "\\d{4}"))
lines <- readLines(file_path)
if (length(grep("^\\d+\\s+\\w+", lines)) == 0) {
return(data.frame(word = character(), mi_score = numeric(), year = numeric()))
}
collocates_data <- lines[grep("^\\d+\\s+\\w+", lines)]
collocates <- lapply(collocates_data, function(line) {
parts <- strsplit(line, "\\s+")[[1]]
list(
word = parts[2],
mi_score = as.numeric(parts[7])
)
})
df <- do.call(rbind, lapply(collocates, as.data.frame))
df$year <- year
return(df)
}
# Load and filter collocate data
load_collocate_data <- function(data_dir, mi_score_threshold = 3) {
collocate_files <- fs::dir_ls(data_dir, regexp = "\\.txt$")
all_data <- do.call(rbind, lapply(collocate_files, process_file))
all_data <- all_data %>%
distinct(word, year, .keep_all = TRUE) %>%
filter(mi_score >= mi_score_threshold) %>%
mutate(present = 1)
return(all_data)
}
# Remaining helper functions
prepare_spread_data <- function(all_data) {
spread_data <- all_data %>%
pivot_wider(names_from = year, values_from = present, values_fill = 0)
return(spread_data)
}
save_spread_data <- function(spread_data, base_filename, output_dir = ".") {
output_file <- file.path(output_dir, paste0(base_filename, ".csv"))
write.table(spread_data, file = output_file, sep = "\t")
}
calculate_gwet_ac1 <- function(data) {
i <- 3
v <- c()
years <- c()
while (i <= ncol(data) - 1) {
if (sum(colSums(data[, i:(i+1)]) > 0) >= 1) {
n <- gwet.ac1.raw(data[, i:(i+1)])$est$coeff.val
v <- c(v, n)
years <- c(years, as.numeric(colnames(data)[i]))
} else {
message("Skipping AC1 calculation for years ", colnames(data)[i], "-", colnames(data)[i+1], " due to insufficient data")
}
i <- i + 1
}
return(data.frame(year = years, ac1 = v))
}
create_ufa_plot <- function(g, base_filename, output_dir = ".", target_word, window_type) {
output_file <- file.path(output_dir, paste0(base_filename, "_ufa.png"))
p <- ggplot(g, aes(x = year, y = ac1)) +
geom_point() +
scale_x_continuous(
breaks = sort(unique(c(seq(floor(min(g$year)), ceiling(max(g$year)), by = 20)))),
limits = c(floor(min(g$year)), ceiling(max(g$year)))
) +
xlab("Year") +
ylab("AC1") +
ggtitle(paste("UFA for Collocations (", target_word, ") (10 year moving-windows) (", window, "L ", window, "R collocate gap)", sep = ""))
final_plot <- p +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#707070", level = 0.95) +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#FFFF00", level = 0.995) +
theme_minimal(base_size = 15) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(margin = margin(b = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10))
)
ggsave(output_file, plot = final_plot, width = 12, height = 8, units = "in", dpi = 300)
}
#for those that also have fiction as collocate
create_collocate_highlight_plot <- function(g, all_data, base_filename, highlight_word, output_dir = ".") {
output_file <- file.path(output_dir, paste0(base_filename, "_with_", highlight_word, ".png"))
highlight_years <- all_data %>%
filter(word == highlight_word) %>%
pull(year)
p <- ggplot(g, aes(x = year, y = ac1)) +
geom_point() +
scale_x_continuous(
breaks = sort(unique(c(seq(floor(min(g$year)), ceiling(max(g$year)), by = 20)))),
limits = c(floor(min(g$year)), ceiling(max(g$year)))
) +
xlab("Year") +
ylab("AC1") +
ggtitle(paste("UFA with", highlight_word, "as Collocate"))
final_plot <- p +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#707070", level = 0.95) +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#FFFF00", level = 0.995) +
geom_point(
data = g[g$year %in% highlight_years,],
aes(x = year, y = ac1, color = paste0("'", highlight_word, "' as collocate")),
size = 3
) +
scale_color_manual(
values = setNames("#FF6B6B", paste0("'", highlight_word, "' as collocate"))
) +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "white", color = "gray90"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", margin = margin(b = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "gray90")
)
ggsave(output_file, plot = final_plot, width = 12, height = 8, units = "in", dpi = 300)
print(paste("Years with", highlight_word, "as a collocate:", paste(highlight_years, collapse = ", ")))
}
#3 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_fact_600-3_w3/"
)
library(fs)
library(tidyverse)
library(irrCAC)
library(pacman)
# Main function to process a single folder of collocate data
process_collocate_folder <- function(folder_path,
mi_score_threshold = 3,
highlight_word = NULL,
output_dir = ".") {
folder_info <- extract_folder_info(folder_path)
# Create output directory if it doesn't exist
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
target_word <- ifelse(grepl("facts", folder_path), "facts",
ifelse(grepl("fact", folder_path), "fact", "unknown")) #could be part of the helper function, but w/e
window = folder_info$window
# Process the data
all_data <- load_collocate_data(folder_path, mi_score_threshold)
spread_data <- prepare_spread_data(all_data)
# Save the processed data
output_file_base <- paste0(target_word, "_collocates_",
folder_info$start_year, "_",
folder_info$end_year,
folder_info$window, "")
save_spread_data(spread_data, output_file_base, output_dir)
# Calculate Gwet's AC1
g <- calculate_gwet_ac1(spread_data)
# Create plots
create_ufa_plot(g, output_file_base, output_dir, target_word, window)
# Create highlight plot if highlight_word is provided AND exists in the data (currently useless)
if (!is.null(highlight_word)) {
if (highlight_word %in% all_data$word) {
create_collocate_highlight_plot(g, all_data, output_file_base, highlight_word, output_dir)
message(sprintf("Created highlight plot for '%s' as it exists as a collocate", highlight_word))
} else {
message(sprintf("Skipping highlight plot: '%s' was not found as a collocate in the data", highlight_word))
}
}
# Return the processed data and AC1 calculations
return(list(
all_data = all_data,
spread_data = spread_data,
gwet_ac1 = g,
folder_info = folder_info
))
}
# Helper function to extract information from folder name
extract_folder_info <- function(folder_path) {
folder_name <- basename(folder_path)
# Extract years
years <- str_extract_all(folder_name, "\\d{4}")[[1]]
start_year <- years[1]
end_year <- years[2]
#get the window size (for collocate)
window <- ifelse(grepl("window5", folder_name), "5", "3")
# Extract other parameters if present (currently useless)
word_count <- str_extract(folder_name, "\\d+m-\\d+") # For patterns like "2m-20"
return(list(
start_year = start_year,
end_year = end_year,
window = window,
word_count = word_count
))
}
# Function to process individual collocate files
process_file <- function(file_path) {
year <- as.numeric(str_extract(basename(file_path), "\\d{4}"))
lines <- readLines(file_path)
if (length(grep("^\\d+\\s+\\w+", lines)) == 0) {
return(data.frame(word = character(), mi_score = numeric(), year = numeric()))
}
collocates_data <- lines[grep("^\\d+\\s+\\w+", lines)]
collocates <- lapply(collocates_data, function(line) {
parts <- strsplit(line, "\\s+")[[1]]
list(
word = parts[2],
mi_score = as.numeric(parts[7])
)
})
df <- do.call(rbind, lapply(collocates, as.data.frame))
df$year <- year
return(df)
}
# Load and filter collocate data
load_collocate_data <- function(data_dir, mi_score_threshold = 3) {
collocate_files <- fs::dir_ls(data_dir, regexp = "\\.txt$")
all_data <- do.call(rbind, lapply(collocate_files, process_file))
all_data <- all_data %>%
distinct(word, year, .keep_all = TRUE) %>%
filter(mi_score >= mi_score_threshold) %>%
mutate(present = 1)
return(all_data)
}
# Remaining helper functions
prepare_spread_data <- function(all_data) {
spread_data <- all_data %>%
pivot_wider(names_from = year, values_from = present, values_fill = 0)
return(spread_data)
}
save_spread_data <- function(spread_data, base_filename, output_dir = ".") {
output_file <- file.path(output_dir, paste0(base_filename, ".csv"))
write.table(spread_data, file = output_file, sep = "\t")
}
calculate_gwet_ac1 <- function(data) {
i <- 3
v <- c()
years <- c()
while (i <= ncol(data) - 1) {
if (sum(colSums(data[, i:(i+1)]) > 0) >= 1) {
n <- gwet.ac1.raw(data[, i:(i+1)])$est$coeff.val
v <- c(v, n)
years <- c(years, as.numeric(colnames(data)[i]))
} else {
message("Skipping AC1 calculation for years ", colnames(data)[i], "-", colnames(data)[i+1], " due to insufficient data")
}
i <- i + 1
}
return(data.frame(year = years, ac1 = v))
}
create_ufa_plot <- function(g, base_filename, output_dir = ".", target_word, window_type) {
output_file <- file.path(output_dir, paste0(base_filename, "_ufa.png"))
p <- ggplot(g, aes(x = year, y = ac1)) +
geom_point() +
scale_x_continuous(
breaks = sort(unique(c(seq(floor(min(g$year)), ceiling(max(g$year)), by = 20)))),
limits = c(floor(min(g$year)), ceiling(max(g$year)))
) +
xlab("Year") +
ylab("AC1") +
ggtitle(paste("UFA for Collocations (", target_word, ") (10 year moving-windows) (", window_type, "L ", window_type, "R collocate gap)", sep = ""))
final_plot <- p +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#707070", level = 0.95) +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#FFFF00", level = 0.995) +
theme_minimal(base_size = 15) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(margin = margin(b = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10))
)
ggsave(output_file, plot = final_plot, width = 12, height = 8, units = "in", dpi = 300)
}
#for those that also have fiction as collocate
create_collocate_highlight_plot <- function(g, all_data, base_filename, highlight_word, output_dir = ".") {
output_file <- file.path(output_dir, paste0(base_filename, "_with_", highlight_word, ".png"))
highlight_years <- all_data %>%
filter(word == highlight_word) %>%
pull(year)
p <- ggplot(g, aes(x = year, y = ac1)) +
geom_point() +
scale_x_continuous(
breaks = sort(unique(c(seq(floor(min(g$year)), ceiling(max(g$year)), by = 20)))),
limits = c(floor(min(g$year)), ceiling(max(g$year)))
) +
xlab("Year") +
ylab("AC1") +
ggtitle(paste("UFA with", highlight_word, "as Collocate"))
final_plot <- p +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#707070", level = 0.95) +
stat_smooth(method = "gam",
formula = y ~ s(x, bs = "cr", fx = FALSE, k = 10),
size = 1, fill = "#FFFF00", level = 0.995) +
geom_point(
data = g[g$year %in% highlight_years,],
aes(x = year, y = ac1, color = paste0("'", highlight_word, "' as collocate")),
size = 3
) +
scale_color_manual(
values = setNames("#FF6B6B", paste0("'", highlight_word, "' as collocate"))
) +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "white", color = "gray90"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", margin = margin(b = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "gray90")
)
ggsave(output_file, plot = final_plot, width = 12, height = 8, units = "in", dpi = 300)
print(paste("Years with", highlight_word, "as a collocate:", paste(highlight_years, collapse = ", ")))
}
#3 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_fact_600-3_w3/"
)
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_facts_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_facts_600-3_w3/"
)
#5 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3_window5",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/5window/collocates_old_fact_600-3_w5/"
)
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_facts_600-3_window5",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/5window/collocates_old_facts_600-3_w5/"
)
#3 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_fact_600-3_w3/"
)
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_facts_600-3",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/3window/collocates_old_facts_600-3_w3/"
)
#5 word windows, old
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_fact_600-3_window5",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/5window/collocates_old_fact_600-3_w5/"
)
results <- process_collocate_folder(
folder_path = "../collocate_results_1665-1958_facts_600-3_window5",
mi_score_threshold = 3,
highlight_word = "fiction",
output_dir = "collocate_results/5window/collocates_old_facts_600-3_w5/"
)
library(knitr)
folder_to_ignore <- "5window" #only plotting 3 window
files <- list.files("collocate_results/",
pattern = "_ufa\\.png$",
full.names = TRUE,
recursive = TRUE)
files <- files[!grepl(paste0("/", folder_to_ignore, "/"), files)]
if (length(files) == 0) {
print("No images found with '_ufa.png' in the filename.")
} else {
include_graphics(files)
}
library(knitr)
folder_to_ignore <- "3window" #only plotting 5 window
files <- list.files("collocate_results/",
pattern = "_ufa\\.png$",
full.names = TRUE,
recursive = TRUE)
files <- files[!grepl(paste0("/", folder_to_ignore, "/"), files)]
if (length(files) == 0) {
print("No images found with '_ufa.png' in the filename.")
} else {
include_graphics(files)
}
